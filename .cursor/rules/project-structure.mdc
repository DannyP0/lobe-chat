---
description: Project directory structure overview
alwaysApply: false
---

# LobeChat Project Structure

note: some not very important files are not shown for simplicity.

## Complete Project Structure

this project use common monorepo structure. The workspace packages name use `@lobechat/` namespace.

```plaintext
lobe-chat/
├── apps/
│   └── desktop/
├── docs/
├── locales/
│   ├── en-US/
│   └── zh-CN/
├── packages/
│   ├── const/
│   ├── context-engine/
│   ├── database/
│   │   ├── src/
│   │   │   ├── models/
│   │   │   ├── schemas/
│   │   │   └── repositories/
│   ├── model-bank/
│   ├── model-runtime/
│   │   └── src/
│   │       ├── openai/
│   │       └── anthropic/
│   ├── types/
│   │   └── src/
│   │       ├── message/
│   │       └── user/
│   └── utils/
├── public/
├── scripts/
├── src/
│   ├── app/
│   │   ├── (backend)/
│   │   │   ├── _deprecated/
│   │   │   ├── api/
│   │   │   │   ├── auth/
│   │   │   │   └── webhooks/
│   │   │   ├── middleware/
│   │   │   ├── oidc/
│   │   │   ├── trpc/
│   │   │   └── webapi/
│   │   │       ├── chat/
│   │   │       └── tts/
│   │   ├── [variants]/
│   │   │   ├── (auth)/
│   │   │   ├── (main)/
│   │   │   │   ├── chat/
│   │   │   │   └── settings/
│   │   │   └── @modal/
│   │   ├── desktop/
│   │   ├── oauth/
│   │   ├── loading/
│   │   ├── manifest.ts
│   │   ├── robots.tsx
│   │   ├── sitemap.tsx
│   │   └── sw.ts
│   ├── components/
│   │   ├── Analytics/
│   │   ├── ChatItem/
│   │   ├── Error/
│   │   ├── Loading/
│   │   ├── client/
│   │   ├── server/
│   │   └── ...
│   ├── config/
│   │   ├── featureFlags/
│   │   └── modelProviders/
│   ├── const/
│   ├── database/
│   │   └── _deprecated/
│   ├── envs/
│   │   ├── __tests__/
│   │   ├── analytics.ts
│   │   ├── app.ts
│   │   ├── auth.ts
│   │   └── ...
│   ├── features/
│   │   ├── AgentInfo/
│   │   ├── ChatInput/
│   │   ├── FileManager/
│   │   ├── ModelSelect/
│   │   ├── PluginStore/
│   │   └── ...
│   ├── helpers/
│   │   └── toolEngineering/
│   ├── hooks/
│   │   ├── useActiveTabKey.ts
│   │   ├── useGreeting/
│   │   ├── useHotkeys/
│   │   └── ...
│   ├── instrumentation.ts
│   ├── instrumentation.node.ts
│   ├── layout/
│   │   ├── AuthProvider/
│   │   │   ├── Clerk/
│   │   │   ├── NextAuth/
│   │   │   └── NoAuth/
│   │   └── GlobalProvider/
│   ├── libs/
│   │   ├── analytics/
│   │   ├── clerk-auth/
│   │   ├── langchain/
│   │   ├── mcp/
│   │   ├── next-auth/
│   │   ├── oidc-provider/
│   │   ├── swr/
│   │   ├── traces/
│   │   ├── trpc/
│   │   └── unstructured/
│   ├── locales/
│   │   ├── default/
│   │   ├── create.ts
│   │   ├── resources.ts
│   │   └── resources.test.ts
│   ├── middleware.ts
│   ├── migrations/
│   │   ├── FromV0ToV1.ts
│   │   ├── FromV1ToV2/
│   │   ├── FromV2ToV3/
│   │   ├── FromV3ToV4/
│   │   ├── FromV4ToV5/
│   │   ├── FromV5ToV6/
│   │   ├── FromV6ToV7/
│   │   ├── VersionController.ts
│   │   └── index.ts
│   ├── server/
│   │   ├── featureFlags/
│   │   ├── globalConfig/
│   │   ├── modules/
│   │   │   ├── AssistantStore/
│   │   │   ├── ContentChunk/
│   │   │   ├── EdgeConfig/
│   │   │   ├── ElectronIPCClient/
│   │   │   ├── KeyVaultsEncrypt/
│   │   │   ├── ModelRuntime/
│   │   │   ├── PluginStore/
│   │   │   └── S3/
│   │   ├── routers/
│   │   │   ├── async/
│   │   │   ├── desktop/
│   │   │   ├── edge/
│   │   │   ├── lambda/
│   │   │   └── tools/
│   │   ├── services/
│   │   │   ├── agent/
│   │   │   ├── aiChat/
│   │   │   ├── changelog/
│   │   │   ├── discover/
│   │   │   ├── file/
│   │   │   ├── generation/
│   │   │   ├── mcp/
│   │   │   ├── nextAuthUser/
│   │   │   ├── oidc/
│   │   │   ├── search/
│   │   │   └── user/
│   │   └── utils/
│   ├── services/
│   │   ├── __tests__/
│   │   ├── aiModel/
│   │   ├── aiProvider/
│   │   ├── baseClientService/
│   │   ├── chat/
│   │   ├── electron/
│   │   ├── export/
│   │   ├── file/
│   │   ├── import/
│   │   ├── message/
│   │   ├── plugin/
│   │   ├── session/
│   │   ├── tableViewer/
│   │   ├── thread/
│   │   ├── topic/
│   │   ├── user/
│   │   └── ...
│   ├── store/
│   │   ├── agent/
│   │   ├── aiInfra/
│   │   ├── chat/
│   │   ├── discover/
│   │   ├── electron/
│   │   ├── file/
│   │   ├── global/
│   │   ├── image/
│   │   ├── knowledgeBase/
│   │   ├── middleware/
│   │   ├── serverConfig/
│   │   ├── session/
│   │   ├── tool/
│   │   └── user/
│   ├── styles/
│   ├── tools/
│   │   ├── artifacts/
│   │   ├── code-interpreter/
│   │   ├── dalle/
│   │   ├── local-system/
│   │   ├── web-browsing/
│   │   ├── index.ts
│   │   ├── portals.ts
│   │   └── renders.ts
│   ├── types/
│   │   ├── global.d.ts
│   │   ├── i18next.d.ts
│   │   ├── locale.ts
│   │   ├── next-auth.d.ts
│   │   ├── next.ts
│   │   └── worker.d.ts
│   └── utils/
│       ├── client/
│       ├── server/
│       ├── errorResponse.ts
│       └── locale.ts
└── package.json
```

## Architecture Map

- UI Components: `src/components`, `src/features`
- Global providers: `src/layout`
- Zustand stores: `src/store`
- Client Services: `src/services/`
  - clientDB: `src/services/<domain>/client.ts`
  - serverDB: `src/services/<domain>/server.ts`
- API Routers:
  - `src/app/(backend)/webapi` (REST)
  - `src/server/routers/{edge|lambda|async|desktop|tools}` (tRPC)
- Server:
  - Services(can access serverDB): `src/server/services`
  - Modules(can't access db): `src/server/modules` (Server only Third-party Service Module)
- Database:
  - Schema (Drizzle): `packages/database/src/schemas`
  - Model (CRUD): `packages/database/src/models`
  - Repository (bff-queries): `packages/database/src/repositories`
- Third-party Integrations: `src/libs` — analytics, oidc etc.

## Data Flow Architecture

- **Browser/PWA**: React UI → Client Service → Direct Model Access → PGLite (Web WASM)
- **Server**: React UI → Client Service → tRPC Lambda → Server Services → PostgreSQL (Remote)
- **Desktop**:
  - Cloud sync disabled: Electron UI → Client Service → tRPC Lambda → Local Server Services → PGLite (Node WASM)
  - Cloud sync enabled: Electron UI → Client Service → tRPC Lambda → Cloud Server Services → PostgreSQL (Remote)
